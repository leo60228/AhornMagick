using BinaryProvider # requires BinaryProvider 0.3.0 or later

dependencies = [
    "build_Zlib.v1.2.11.jl",
    "build_libpng.v1.0.0.jl",
    "build_libjpeg.v9.0.0-b.jl",
    "build_libtiff.v4.0.9.jl"
]

for elem in dependencies
    # it's a bit faster to run the build in an anonymous module instead of
    # starting a new julia process
    m = Module(:__anon__)
    Core.include(m, (joinpath(@__DIR__, elem)))
end

const version = v"6.9.10-12"

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libMagickWand"], :libwand),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/leo60228/AhornMagickBuilder/releases/download/v6.9.10-12"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/ImageMagick.v6.9.10-12.x86_64-linux-gnu.tar.gz", "9d03ca93dfe29ac656b97ba692c9c4331ff0b9aed2311285977398bd95b252be"),
    Windows(:x86_64) => ("$bin_prefix/ImageMagick.v6.9.10-12.x86_64-w64-mingw32.tar.gz", "a9d4abdbe7a3f0e91d7b2b05bf62cedf6d9a0493013ab5aec45571ecbbb22f64"),
)


# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps_im.jl"), products)

function include_deps(name)
    """
    module $name
        import Libdl
        path = joinpath(@__DIR__, $(repr(string("deps_", name, ".jl"))))
        isfile(path) || error("$name wasn't build correctly. Please run Pkg.build(\\\"ImageMagick\\\")")
        include(path)
    end
    using .$name
    """
end

open("deps.jl", "w") do io
    for dep in (:zlib, :png, :jpeg, :tiff, :im)
        println(io, include_deps(dep))
    end
    println(io, """
    libversion() = $(repr(version))
    const libwand = im.libwand

    function check_deps()
        zlib.check_deps()
        png.check_deps()
        jpeg.check_deps()
        tiff.check_deps()
        im.check_deps()
    end
    """)
end
